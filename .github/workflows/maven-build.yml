name: Build and Tag Docker Image with Branch-Specific Tagging

on:
  push:
    branches:
      - master  # Tracks only the master branch
      - '*'     # Tracks any other branches you may work with

  pull_request:
    branches:
      - master  # Tracks PRs to master

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Ensure write access to repository contents

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java JDK for Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Determine Tag Name Based on Branch
      - name: Set the Tag Name
        id: set_tag_name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "::set-output name=tag_name::v1.0.0-${{ github.run_number }}"
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
            echo "::set-output name=tag_name::${BRANCH_NAME}-${{ github.sha }}"
          fi

      # Step 5: Build Docker image (skip for PRs)
      - name: Build Docker image
        if: github.event_name != 'pull_request'  # Skip this step in PRs
        run: docker build -t dhirajvarma4158/spring-petclinic-main:${{ steps.set_tag_name.outputs.tag_name }} .

      # Step 6: Log in to Docker Hub (skip for PRs)
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'  # Skip this step in PRs
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Push Docker image to Docker Hub (skip for PRs)
      - name: Push Docker image
        if: github.event_name != 'pull_request'  # Skip this step in PRs
        run: |
          docker push dhirajvarma4158/spring-petclinic-main:${{ steps.set_tag_name.outputs.tag_name }}
          docker tag dhirajvarma4158/spring-petclinic-main:${{ steps.set_tag_name.outputs.tag_name }} dhirajvarma4158/spring-petclinic-main:latest
          docker push dhirajvarma4158/spring-petclinic-main:latest

      # Step 8: Create a release in GitHub (only for master branch)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/master'  # Only create a release on the master branch
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag_name.outputs.tag_name }}
          release_name: "Release ${{ steps.set_tag_name.outputs.tag_name }}"
          draft: false
          prerelease: false

      # Step 8.5: Debug the upload_url (optional, for troubleshooting)
      - name: Debug upload_url
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"

      # Step 9: Upload JAR file to GitHub Release (only for master branch)
      - name: Upload JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/spring-petclinic-*.jar  # Use wildcard to match JAR
          asset_name: spring-petclinic-main.jar
          asset_content_type: application/java-archive