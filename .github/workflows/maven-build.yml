name: Build and Push Docker Image with WAR Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java JDK for Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Build Docker image
      - name: Build Docker image
        run: docker build -t dhirajvarma4158/spring-petclinic-main:${{ github.sha }} .

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Set in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Set in GitHub Secrets

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push dhirajvarma4158/spring-petclinic-main:${{ github.sha }}
          docker tag dhirajvarma4158/spring-petclinic-main:${{ github.sha }} dhirajvarma4158/spring-petclinic-main:latest
          docker push dhirajvarma4158/spring-petclinic-main:latest

      # Step 7: Create a release in GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub automatically provides this secret
        with:
          tag_name: ${{ github.sha }}  # Tag release with commit SHA
          release_name: "Release ${{ github.sha }}"
          draft: false
          prerelease: false

      # Step 8: Upload WAR file to GitHub Releases
      - name: Upload WAR to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.war  # Path to the generated WAR file
          asset_name: spring-petclinic-main.war  # Name to give the uploaded WAR file
          asset_content_type: application/java-archive
